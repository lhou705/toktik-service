// Code generated by Kitex v0.4.4. DO NOT EDIT.

package video

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	video "toktik/service/web/kitex_gen/video"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	GetFeedList(ctx context.Context, req *video.GetFeedListReq, callOptions ...callopt.Option) (r *video.GetFeedListResp, err error)
	PublishVideo(ctx context.Context, req *video.PublishVideoReq, callOptions ...callopt.Option) (r *video.PublishVideoResp, err error)
	GetPublishList(ctx context.Context, req *video.GetPublishListReq, callOptions ...callopt.Option) (r *video.GetPublishListResp, err error)
	FavoriteVideoStatus(ctx context.Context, req *video.FavoriteVideoReq, callOptions ...callopt.Option) (r *video.FavoriteVideoResp, err error)
	UnFavoriteVideoStatus(ctx context.Context, req *video.FavoriteVideoReq, callOptions ...callopt.Option) (r *video.FavoriteVideoResp, err error)
	GetFavoriteList(ctx context.Context, req *video.GetFavoriteListReq, callOptions ...callopt.Option) (r *video.GetFavoriteListResp, err error)
	SendComment(ctx context.Context, req *video.SendCommentReq, callOptions ...callopt.Option) (r *video.SendCommentResp, err error)
	DeleteComment(ctx context.Context, req *video.DeleteCommentReq, callOptions ...callopt.Option) (r *video.DeleteCommentResp, err error)
	GetCommentListComment(ctx context.Context, req *video.GetCommentListReq, callOptions ...callopt.Option) (r *video.GetCommentListResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kVideoClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kVideoClient struct {
	*kClient
}

func (p *kVideoClient) GetFeedList(ctx context.Context, req *video.GetFeedListReq, callOptions ...callopt.Option) (r *video.GetFeedListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFeedList(ctx, req)
}

func (p *kVideoClient) PublishVideo(ctx context.Context, req *video.PublishVideoReq, callOptions ...callopt.Option) (r *video.PublishVideoResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PublishVideo(ctx, req)
}

func (p *kVideoClient) GetPublishList(ctx context.Context, req *video.GetPublishListReq, callOptions ...callopt.Option) (r *video.GetPublishListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetPublishList(ctx, req)
}

func (p *kVideoClient) FavoriteVideoStatus(ctx context.Context, req *video.FavoriteVideoReq, callOptions ...callopt.Option) (r *video.FavoriteVideoResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FavoriteVideoStatus(ctx, req)
}

func (p *kVideoClient) UnFavoriteVideoStatus(ctx context.Context, req *video.FavoriteVideoReq, callOptions ...callopt.Option) (r *video.FavoriteVideoResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UnFavoriteVideoStatus(ctx, req)
}

func (p *kVideoClient) GetFavoriteList(ctx context.Context, req *video.GetFavoriteListReq, callOptions ...callopt.Option) (r *video.GetFavoriteListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFavoriteList(ctx, req)
}

func (p *kVideoClient) SendComment(ctx context.Context, req *video.SendCommentReq, callOptions ...callopt.Option) (r *video.SendCommentResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SendComment(ctx, req)
}

func (p *kVideoClient) DeleteComment(ctx context.Context, req *video.DeleteCommentReq, callOptions ...callopt.Option) (r *video.DeleteCommentResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteComment(ctx, req)
}

func (p *kVideoClient) GetCommentListComment(ctx context.Context, req *video.GetCommentListReq, callOptions ...callopt.Option) (r *video.GetCommentListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetCommentListComment(ctx, req)
}
