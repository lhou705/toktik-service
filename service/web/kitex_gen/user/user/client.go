// Code generated by Kitex v0.4.4. DO NOT EDIT.

package user

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	user "toktik/service/web/kitex_gen/user"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CheckUser(ctx context.Context, req *user.CheckUserReq, callOptions ...callopt.Option) (r *user.CheckUserResp, err error)
	CreateUser(ctx context.Context, req *user.RegisterUserReq, callOptions ...callopt.Option) (r *user.RegisterUserResp, err error)
	GetUserInfoByUsername(ctx context.Context, req *user.GetUserInfoByUsernameReq, callOptions ...callopt.Option) (r *user.GetUserInfoByUsernameResp, err error)
	GetUserInfoByUserId(ctx context.Context, req *user.GetUserInfoByUserIdReq, callOptions ...callopt.Option) (r *user.GetUserInfoByUserIdResp, err error)
	FollowStatus(ctx context.Context, req *user.FollowReq, callOptions ...callopt.Option) (r *user.FollowResp, err error)
	UnFollowStatus(ctx context.Context, req *user.FollowReq, callOptions ...callopt.Option) (r *user.FollowResp, err error)
	GetFollowList(ctx context.Context, req *user.GetFollowListReq, callOptions ...callopt.Option) (r *user.GetFollowListResp, err error)
	GetFollowerList(ctx context.Context, req *user.GetFollowerListReq, callOptions ...callopt.Option) (r *user.GetFollowerListResp, err error)
	GetFriendList(ctx context.Context, req *user.GetFriendListReq, callOptions ...callopt.Option) (r *user.GetFriendListResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kUserClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kUserClient struct {
	*kClient
}

func (p *kUserClient) CheckUser(ctx context.Context, req *user.CheckUserReq, callOptions ...callopt.Option) (r *user.CheckUserResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CheckUser(ctx, req)
}

func (p *kUserClient) CreateUser(ctx context.Context, req *user.RegisterUserReq, callOptions ...callopt.Option) (r *user.RegisterUserResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateUser(ctx, req)
}

func (p *kUserClient) GetUserInfoByUsername(ctx context.Context, req *user.GetUserInfoByUsernameReq, callOptions ...callopt.Option) (r *user.GetUserInfoByUsernameResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserInfoByUsername(ctx, req)
}

func (p *kUserClient) GetUserInfoByUserId(ctx context.Context, req *user.GetUserInfoByUserIdReq, callOptions ...callopt.Option) (r *user.GetUserInfoByUserIdResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserInfoByUserId(ctx, req)
}

func (p *kUserClient) FollowStatus(ctx context.Context, req *user.FollowReq, callOptions ...callopt.Option) (r *user.FollowResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FollowStatus(ctx, req)
}

func (p *kUserClient) UnFollowStatus(ctx context.Context, req *user.FollowReq, callOptions ...callopt.Option) (r *user.FollowResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UnFollowStatus(ctx, req)
}

func (p *kUserClient) GetFollowList(ctx context.Context, req *user.GetFollowListReq, callOptions ...callopt.Option) (r *user.GetFollowListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFollowList(ctx, req)
}

func (p *kUserClient) GetFollowerList(ctx context.Context, req *user.GetFollowerListReq, callOptions ...callopt.Option) (r *user.GetFollowerListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFollowerList(ctx, req)
}

func (p *kUserClient) GetFriendList(ctx context.Context, req *user.GetFriendListReq, callOptions ...callopt.Option) (r *user.GetFriendListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFriendList(ctx, req)
}
