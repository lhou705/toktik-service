// Code generated by Kitex v0.4.4. DO NOT EDIT.

package user

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	user "toktik/service/web/kitex_gen/user"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceInfo
}

var userServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "User"
	handlerType := (*user.User)(nil)
	methods := map[string]kitex.MethodInfo{
		"CheckUser":             kitex.NewMethodInfo(checkUserHandler, newUserCheckUserArgs, newUserCheckUserResult, false),
		"CreateUser":            kitex.NewMethodInfo(createUserHandler, newUserCreateUserArgs, newUserCreateUserResult, false),
		"GetUserInfoByUsername": kitex.NewMethodInfo(getUserInfoByUsernameHandler, newUserGetUserInfoByUsernameArgs, newUserGetUserInfoByUsernameResult, false),
		"GetUserInfoByUserId":   kitex.NewMethodInfo(getUserInfoByUserIdHandler, newUserGetUserInfoByUserIdArgs, newUserGetUserInfoByUserIdResult, false),
		"FollowStatus":          kitex.NewMethodInfo(followStatusHandler, newUserFollowStatusArgs, newUserFollowStatusResult, false),
		"UnFollowStatus":        kitex.NewMethodInfo(unFollowStatusHandler, newUserUnFollowStatusArgs, newUserUnFollowStatusResult, false),
		"GetFollowList":         kitex.NewMethodInfo(getFollowListHandler, newUserGetFollowListArgs, newUserGetFollowListResult, false),
		"GetFollowerList":       kitex.NewMethodInfo(getFollowerListHandler, newUserGetFollowerListArgs, newUserGetFollowerListResult, false),
		"GetFriendList":         kitex.NewMethodInfo(getFriendListHandler, newUserGetFriendListArgs, newUserGetFriendListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func checkUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserCheckUserArgs)
	realResult := result.(*user.UserCheckUserResult)
	success, err := handler.(user.User).CheckUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserCheckUserArgs() interface{} {
	return user.NewUserCheckUserArgs()
}

func newUserCheckUserResult() interface{} {
	return user.NewUserCheckUserResult()
}

func createUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserCreateUserArgs)
	realResult := result.(*user.UserCreateUserResult)
	success, err := handler.(user.User).CreateUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserCreateUserArgs() interface{} {
	return user.NewUserCreateUserArgs()
}

func newUserCreateUserResult() interface{} {
	return user.NewUserCreateUserResult()
}

func getUserInfoByUsernameHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserGetUserInfoByUsernameArgs)
	realResult := result.(*user.UserGetUserInfoByUsernameResult)
	success, err := handler.(user.User).GetUserInfoByUsername(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserGetUserInfoByUsernameArgs() interface{} {
	return user.NewUserGetUserInfoByUsernameArgs()
}

func newUserGetUserInfoByUsernameResult() interface{} {
	return user.NewUserGetUserInfoByUsernameResult()
}

func getUserInfoByUserIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserGetUserInfoByUserIdArgs)
	realResult := result.(*user.UserGetUserInfoByUserIdResult)
	success, err := handler.(user.User).GetUserInfoByUserId(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserGetUserInfoByUserIdArgs() interface{} {
	return user.NewUserGetUserInfoByUserIdArgs()
}

func newUserGetUserInfoByUserIdResult() interface{} {
	return user.NewUserGetUserInfoByUserIdResult()
}

func followStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserFollowStatusArgs)
	realResult := result.(*user.UserFollowStatusResult)
	success, err := handler.(user.User).FollowStatus(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserFollowStatusArgs() interface{} {
	return user.NewUserFollowStatusArgs()
}

func newUserFollowStatusResult() interface{} {
	return user.NewUserFollowStatusResult()
}

func unFollowStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserUnFollowStatusArgs)
	realResult := result.(*user.UserUnFollowStatusResult)
	success, err := handler.(user.User).UnFollowStatus(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserUnFollowStatusArgs() interface{} {
	return user.NewUserUnFollowStatusArgs()
}

func newUserUnFollowStatusResult() interface{} {
	return user.NewUserUnFollowStatusResult()
}

func getFollowListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserGetFollowListArgs)
	realResult := result.(*user.UserGetFollowListResult)
	success, err := handler.(user.User).GetFollowList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserGetFollowListArgs() interface{} {
	return user.NewUserGetFollowListArgs()
}

func newUserGetFollowListResult() interface{} {
	return user.NewUserGetFollowListResult()
}

func getFollowerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserGetFollowerListArgs)
	realResult := result.(*user.UserGetFollowerListResult)
	success, err := handler.(user.User).GetFollowerList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserGetFollowerListArgs() interface{} {
	return user.NewUserGetFollowerListArgs()
}

func newUserGetFollowerListResult() interface{} {
	return user.NewUserGetFollowerListResult()
}

func getFriendListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserGetFriendListArgs)
	realResult := result.(*user.UserGetFriendListResult)
	success, err := handler.(user.User).GetFriendList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserGetFriendListArgs() interface{} {
	return user.NewUserGetFriendListArgs()
}

func newUserGetFriendListResult() interface{} {
	return user.NewUserGetFriendListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CheckUser(ctx context.Context, req *user.CheckUserReq) (r *user.CheckUserResp, err error) {
	var _args user.UserCheckUserArgs
	_args.Req = req
	var _result user.UserCheckUserResult
	if err = p.c.Call(ctx, "CheckUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateUser(ctx context.Context, req *user.RegisterUserReq) (r *user.RegisterUserResp, err error) {
	var _args user.UserCreateUserArgs
	_args.Req = req
	var _result user.UserCreateUserResult
	if err = p.c.Call(ctx, "CreateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserInfoByUsername(ctx context.Context, req *user.GetUserInfoByUsernameReq) (r *user.GetUserInfoByUsernameResp, err error) {
	var _args user.UserGetUserInfoByUsernameArgs
	_args.Req = req
	var _result user.UserGetUserInfoByUsernameResult
	if err = p.c.Call(ctx, "GetUserInfoByUsername", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserInfoByUserId(ctx context.Context, req *user.GetUserInfoByUserIdReq) (r *user.GetUserInfoByUserIdResp, err error) {
	var _args user.UserGetUserInfoByUserIdArgs
	_args.Req = req
	var _result user.UserGetUserInfoByUserIdResult
	if err = p.c.Call(ctx, "GetUserInfoByUserId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowStatus(ctx context.Context, req *user.FollowReq) (r *user.FollowResp, err error) {
	var _args user.UserFollowStatusArgs
	_args.Req = req
	var _result user.UserFollowStatusResult
	if err = p.c.Call(ctx, "FollowStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UnFollowStatus(ctx context.Context, req *user.FollowReq) (r *user.FollowResp, err error) {
	var _args user.UserUnFollowStatusArgs
	_args.Req = req
	var _result user.UserUnFollowStatusResult
	if err = p.c.Call(ctx, "UnFollowStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowList(ctx context.Context, req *user.GetFollowListReq) (r *user.GetFollowListResp, err error) {
	var _args user.UserGetFollowListArgs
	_args.Req = req
	var _result user.UserGetFollowListResult
	if err = p.c.Call(ctx, "GetFollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowerList(ctx context.Context, req *user.GetFollowerListReq) (r *user.GetFollowerListResp, err error) {
	var _args user.UserGetFollowerListArgs
	_args.Req = req
	var _result user.UserGetFollowerListResult
	if err = p.c.Call(ctx, "GetFollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFriendList(ctx context.Context, req *user.GetFriendListReq) (r *user.GetFriendListResp, err error) {
	var _args user.UserGetFriendListArgs
	_args.Req = req
	var _result user.UserGetFriendListResult
	if err = p.c.Call(ctx, "GetFriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
