// Code generated by Kitex v0.4.4. DO NOT EDIT.

package message

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	message "toktik/service/web/kitex_gen/message"
)

func serviceInfo() *kitex.ServiceInfo {
	return messageServiceInfo
}

var messageServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Message"
	handlerType := (*message.Message)(nil)
	methods := map[string]kitex.MethodInfo{
		"SendMessage":    kitex.NewMethodInfo(sendMessageHandler, newMessageSendMessageArgs, newMessageSendMessageResult, false),
		"GetMessageList": kitex.NewMethodInfo(getMessageListHandler, newMessageGetMessageListArgs, newMessageGetMessageListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "message",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func sendMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*message.MessageSendMessageArgs)
	realResult := result.(*message.MessageSendMessageResult)
	success, err := handler.(message.Message).SendMessage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageSendMessageArgs() interface{} {
	return message.NewMessageSendMessageArgs()
}

func newMessageSendMessageResult() interface{} {
	return message.NewMessageSendMessageResult()
}

func getMessageListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*message.MessageGetMessageListArgs)
	realResult := result.(*message.MessageGetMessageListResult)
	success, err := handler.(message.Message).GetMessageList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageGetMessageListArgs() interface{} {
	return message.NewMessageGetMessageListArgs()
}

func newMessageGetMessageListResult() interface{} {
	return message.NewMessageGetMessageListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SendMessage(ctx context.Context, req *message.SendMessageReq) (r *message.SendMessageResp, err error) {
	var _args message.MessageSendMessageArgs
	_args.Req = req
	var _result message.MessageSendMessageResult
	if err = p.c.Call(ctx, "SendMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetMessageList(ctx context.Context, req *message.GetMessageListReq) (r *message.GetMessageListResp, err error) {
	var _args message.MessageGetMessageListArgs
	_args.Req = req
	var _result message.MessageGetMessageListResult
	if err = p.c.Call(ctx, "GetMessageList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
