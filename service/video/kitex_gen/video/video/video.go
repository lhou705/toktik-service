// Code generated by Kitex v0.4.4. DO NOT EDIT.

package video

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	video "toktik/service/video/kitex_gen/video"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceInfo
}

var videoServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Video"
	handlerType := (*video.Video)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetFeedList":           kitex.NewMethodInfo(getFeedListHandler, newVideoGetFeedListArgs, newVideoGetFeedListResult, false),
		"PublishVideo":          kitex.NewMethodInfo(publishVideoHandler, newVideoPublishVideoArgs, newVideoPublishVideoResult, false),
		"GetPublishList":        kitex.NewMethodInfo(getPublishListHandler, newVideoGetPublishListArgs, newVideoGetPublishListResult, false),
		"FavoriteVideoStatus":   kitex.NewMethodInfo(favoriteVideoStatusHandler, newVideoFavoriteVideoStatusArgs, newVideoFavoriteVideoStatusResult, false),
		"UnFavoriteVideoStatus": kitex.NewMethodInfo(unFavoriteVideoStatusHandler, newVideoUnFavoriteVideoStatusArgs, newVideoUnFavoriteVideoStatusResult, false),
		"GetFavoriteList":       kitex.NewMethodInfo(getFavoriteListHandler, newVideoGetFavoriteListArgs, newVideoGetFavoriteListResult, false),
		"SendComment":           kitex.NewMethodInfo(sendCommentHandler, newVideoSendCommentArgs, newVideoSendCommentResult, false),
		"DeleteComment":         kitex.NewMethodInfo(deleteCommentHandler, newVideoDeleteCommentArgs, newVideoDeleteCommentResult, false),
		"GetCommentListComment": kitex.NewMethodInfo(getCommentListCommentHandler, newVideoGetCommentListCommentArgs, newVideoGetCommentListCommentResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "video",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func getFeedListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoGetFeedListArgs)
	realResult := result.(*video.VideoGetFeedListResult)
	success, err := handler.(video.Video).GetFeedList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoGetFeedListArgs() interface{} {
	return video.NewVideoGetFeedListArgs()
}

func newVideoGetFeedListResult() interface{} {
	return video.NewVideoGetFeedListResult()
}

func publishVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoPublishVideoArgs)
	realResult := result.(*video.VideoPublishVideoResult)
	success, err := handler.(video.Video).PublishVideo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoPublishVideoArgs() interface{} {
	return video.NewVideoPublishVideoArgs()
}

func newVideoPublishVideoResult() interface{} {
	return video.NewVideoPublishVideoResult()
}

func getPublishListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoGetPublishListArgs)
	realResult := result.(*video.VideoGetPublishListResult)
	success, err := handler.(video.Video).GetPublishList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoGetPublishListArgs() interface{} {
	return video.NewVideoGetPublishListArgs()
}

func newVideoGetPublishListResult() interface{} {
	return video.NewVideoGetPublishListResult()
}

func favoriteVideoStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoFavoriteVideoStatusArgs)
	realResult := result.(*video.VideoFavoriteVideoStatusResult)
	success, err := handler.(video.Video).FavoriteVideoStatus(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoFavoriteVideoStatusArgs() interface{} {
	return video.NewVideoFavoriteVideoStatusArgs()
}

func newVideoFavoriteVideoStatusResult() interface{} {
	return video.NewVideoFavoriteVideoStatusResult()
}

func unFavoriteVideoStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoUnFavoriteVideoStatusArgs)
	realResult := result.(*video.VideoUnFavoriteVideoStatusResult)
	success, err := handler.(video.Video).UnFavoriteVideoStatus(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoUnFavoriteVideoStatusArgs() interface{} {
	return video.NewVideoUnFavoriteVideoStatusArgs()
}

func newVideoUnFavoriteVideoStatusResult() interface{} {
	return video.NewVideoUnFavoriteVideoStatusResult()
}

func getFavoriteListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoGetFavoriteListArgs)
	realResult := result.(*video.VideoGetFavoriteListResult)
	success, err := handler.(video.Video).GetFavoriteList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoGetFavoriteListArgs() interface{} {
	return video.NewVideoGetFavoriteListArgs()
}

func newVideoGetFavoriteListResult() interface{} {
	return video.NewVideoGetFavoriteListResult()
}

func sendCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoSendCommentArgs)
	realResult := result.(*video.VideoSendCommentResult)
	success, err := handler.(video.Video).SendComment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoSendCommentArgs() interface{} {
	return video.NewVideoSendCommentArgs()
}

func newVideoSendCommentResult() interface{} {
	return video.NewVideoSendCommentResult()
}

func deleteCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoDeleteCommentArgs)
	realResult := result.(*video.VideoDeleteCommentResult)
	success, err := handler.(video.Video).DeleteComment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoDeleteCommentArgs() interface{} {
	return video.NewVideoDeleteCommentArgs()
}

func newVideoDeleteCommentResult() interface{} {
	return video.NewVideoDeleteCommentResult()
}

func getCommentListCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoGetCommentListCommentArgs)
	realResult := result.(*video.VideoGetCommentListCommentResult)
	success, err := handler.(video.Video).GetCommentListComment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoGetCommentListCommentArgs() interface{} {
	return video.NewVideoGetCommentListCommentArgs()
}

func newVideoGetCommentListCommentResult() interface{} {
	return video.NewVideoGetCommentListCommentResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetFeedList(ctx context.Context, req *video.GetFeedListReq) (r *video.GetFeedListResp, err error) {
	var _args video.VideoGetFeedListArgs
	_args.Req = req
	var _result video.VideoGetFeedListResult
	if err = p.c.Call(ctx, "GetFeedList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishVideo(ctx context.Context, req *video.PublishVideoReq) (r *video.PublishVideoResp, err error) {
	var _args video.VideoPublishVideoArgs
	_args.Req = req
	var _result video.VideoPublishVideoResult
	if err = p.c.Call(ctx, "PublishVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPublishList(ctx context.Context, req *video.GetPublishListReq) (r *video.GetPublishListResp, err error) {
	var _args video.VideoGetPublishListArgs
	_args.Req = req
	var _result video.VideoGetPublishListResult
	if err = p.c.Call(ctx, "GetPublishList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteVideoStatus(ctx context.Context, req *video.FavoriteVideoReq) (r *video.FavoriteVideoResp, err error) {
	var _args video.VideoFavoriteVideoStatusArgs
	_args.Req = req
	var _result video.VideoFavoriteVideoStatusResult
	if err = p.c.Call(ctx, "FavoriteVideoStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UnFavoriteVideoStatus(ctx context.Context, req *video.FavoriteVideoReq) (r *video.FavoriteVideoResp, err error) {
	var _args video.VideoUnFavoriteVideoStatusArgs
	_args.Req = req
	var _result video.VideoUnFavoriteVideoStatusResult
	if err = p.c.Call(ctx, "UnFavoriteVideoStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFavoriteList(ctx context.Context, req *video.GetFavoriteListReq) (r *video.GetFavoriteListResp, err error) {
	var _args video.VideoGetFavoriteListArgs
	_args.Req = req
	var _result video.VideoGetFavoriteListResult
	if err = p.c.Call(ctx, "GetFavoriteList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SendComment(ctx context.Context, req *video.SendCommentReq) (r *video.SendCommentResp, err error) {
	var _args video.VideoSendCommentArgs
	_args.Req = req
	var _result video.VideoSendCommentResult
	if err = p.c.Call(ctx, "SendComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteComment(ctx context.Context, req *video.DeleteCommentReq) (r *video.DeleteCommentResp, err error) {
	var _args video.VideoDeleteCommentArgs
	_args.Req = req
	var _result video.VideoDeleteCommentResult
	if err = p.c.Call(ctx, "DeleteComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCommentListComment(ctx context.Context, req *video.GetCommentListReq) (r *video.GetCommentListResp, err error) {
	var _args video.VideoGetCommentListCommentArgs
	_args.Req = req
	var _result video.VideoGetCommentListCommentResult
	if err = p.c.Call(ctx, "GetCommentListComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
